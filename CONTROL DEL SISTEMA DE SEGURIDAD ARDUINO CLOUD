/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/8dd73b08-b8dc-41db-90b3-f3a458036142 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String face_detected;
  int concentracion_gas;
  bool activar_alarma;
  bool fuego;
  bool huella;
  bool puerta_princp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include <ArduinoIoTCloud.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <WiFiUdp.h>
#include <RCSwitch.h>

RCSwitch mySwitch = RCSwitch();

// Definir los pines
#define SENSOR 34
#define BUZZER 4
#define RECEPTOR 16

unsigned long tiempo_puerta_abierta = 0;
// Estado previo de la puerta
unsigned long lastReceiveTime = 0;
const unsigned long debounceDelay = 1500; // Retardo de debounce de 1 segundo
//unsigned long puertaAbiertaTime = 0;
const unsigned long tiempo_cierre_automatico = 3000; // Tiempo en milisegundos antes de cerrar automáticamente la puerta

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(SENSOR, INPUT);
  pinMode(BUZZER, OUTPUT);
  activar_alarma = true;
  huella = false;
  fuego = false;

  // Configurar el pin de recepción
  mySwitch.enableReceive(digitalPinToInterrupt(RECEPTOR));
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  if (activar_alarma == true) {
    huella = false;
  }
  concentracion_gas = analogRead(SENSOR);
  Serial.println(concentracion_gas);
   
  // Verifica si se recibió algún dato del transmisor RF 433 MHz
  if (mySwitch.available()) {
    unsigned long currentTime = millis();
     if (currentTime - lastReceiveTime > debounceDelay) {
       int valorRecibido = mySwitch.getReceivedValue(); 
    
    // Implementa debounce para evitar múltiples detecciones
    //unsigned long tiempoActual = millis();
    //unsigned long tiempoActual1 = millis();

      if (valorRecibido == 4052886 && activar_alarma == true) {
        
        puerta_princp = false;
        Serial.println("Puerta abierta");
        tiempo_puerta_abierta = millis(); // Registrar el momento en que se abrió la puerta;
      } else if (valorRecibido == 1 ) {
        Serial.println("Huella Javi!");
        activar_alarma = false;
        // Enviar el mensaje a la variable huella en Arduino IoT Cloud
        huella = true;
        
      } else if (valorRecibido == 2 ) {
        Serial.println("Huella Pablo!");
        activar_alarma = false;
        // Enviar el mensaje a la variable huella en Arduino IoT Cloud
        huella = true;

      } 
      
        
      
       
      lastReceiveTime = currentTime;
  
    }
    
    mySwitch.resetAvailable();
  }   
  
  // Verificar si ha pasado suficiente tiempo con la puerta abierta
  if (!puerta_princp && millis() - tiempo_puerta_abierta >= tiempo_cierre_automatico) {
    puerta_princp = true;
  }
  fuego = false;
  if(concentracion_gas > 1000) { // Ajusta este valor según tus necesidades
    fuego = true;
    digitalWrite(BUZZER, HIGH);
    delay(3000); // El relé y el buzzer se activan durante 10 segundos
    digitalWrite(BUZZER, LOW);
  }
  delay(1000); // Espera un segundo antes de leer nuevamente  
}
/*
  Since ActivarAlarma is READ_WRITE variable, onActivarAlarmaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onActivarAlarmaChange()  {
  // Add your code here to act upon ActivarAlarma change
  activar_alarma= true;
}


/*
  Since FaceDetected is READ_WRITE variable, onFaceDetectedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFaceDetectedChange()  {
  // Add your code here to act upon FaceDetected change
  if (face_detected == "Desconocido") {
    Serial.println("Rostro desconocido detectado");
    // Puedes añadir acciones adicionales para el rostro desconocido
  } else {
    Serial.print("Rostro reconocido: ");
    Serial.println(face_detected);
    // Puedes añadir acciones adicionales para el rostro reconocido
  }
}


/*
  Since Reconocido is READ_WRITE variable, onReconocidoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onReconocidoChange()  {
  // Add your code here to act upon Reconocido change
}












/*
  Since Fuego is READ_WRITE variable, onFuegoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFuegoChange()  {
  // Add your code here to act upon Fuego change
  
}
